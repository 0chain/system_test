name: ci

on:
  push:
  workflow_dispatch:
    inputs:
      network:
        description: 'network'
        default: 'dev-1'
        required: true
      zbox_branch:
        description: 'zbox branch'
        default: 'staging'
        required: true
      zwallet_branch:
        description: 'zwallet branch'
        default: 'staging'

        required: true
jobs:
  golangci:
    name: lint
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42

  system-tests:
    name: System Tests
    runs-on: [ tests-suite01, tests-suite02 ]
    timeout-minutes: 20
    steps:
      - if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v2

      - if: github.event_name != 'workflow_dispatch'
        uses: azure/setup-helm@v1
        with:
          version: 'v3.2.2'

      - if: github.event_name != 'workflow_dispatch'
        uses: azure/setup-kubectl@v1
        id: install

      - if: github.event_name != 'workflow_dispatch'
        name: Setup helm repo
        run: |
          helm repo add 0chain-helm http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/helmCharts/
          helm repo update

      - if: github.event_name != 'workflow_dispatch'
        name: Get deploy network
        run: echo "NETWORK=dev-${RUNNER_NAME:(-1)}" >> $GITHUB_ENV

      - if: github.event_name != 'workflow_dispatch'
        name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          if [[ "${{ env.NETWORK }}" == "dev-1" ]]; then
            echo "${{ secrets.DEV1KC }}" | base64 -d > ~/.kube/config
          elif [[ "${{ env.NETWORK }}" == "dev-2" ]]; then
            echo "${{ secrets.DEV2KC }}" | base64 -d > ~/.kube/config
          fi

      - if: github.event_name != 'workflow_dispatch'
        name: Cleanup
        run: |
          helm list --short -n ${{ env.NETWORK }} | xargs -L1 helm delete -n ${{ env.NETWORK }}
          sleep 30
          helm upgrade --install --wait --timeout 120s cleanup -n ${{ env.NETWORK }} 0chain-helm/cleanDir
          kubectl wait --for=condition=complete --timeout 900s job/helm-clean-directory -n ${{ env.NETWORK }}

      - if: github.event_name != 'workflow_dispatch'
        name: Setup chain
        run: |
          helm upgrade --install --wait --timeout 120s 0chain -n ${{ env.NETWORK }} --set sharder.sharderImage.tag=latest --set miner.minerImage.tag=latest 0chain-helm/zchain

          helm upgrade --install --wait --timeout 120s 0dns -n ${{ env.NETWORK }} --set zdns.image.tag=latest --set zdns.host=devnet-0chain.net 0chain-helm/zdns

          helm upgrade --install --wait --timeout 120s blobber -n ${{ env.NETWORK }} --set blobber.blobberImage.tag=latest --set validator.validatorImage.tag=latest --set blobber.host=devnet-0chain.net 0chain-helm/blobber

          helm upgrade --install --wait --timeout 120s 0block -n ${{ env.NETWORK }} --set block.blockImage.tag=latest --set block.host=devnet-0chain.net 0chain-helm/zblock

          helm upgrade --install --wait --timeout 120s explorer -n ${{ env.NETWORK }} --set explorer.explorerImage.tag=latest --set explorer.host=devnet-0chain.net 0chain-helm/blockExplorer

          helm upgrade --install --wait --timeout 120s 0proxy -n ${{ env.NETWORK }} --set proxy.image.tag=latest --set proxy.host=devnet-0chain.net 0chain-helm/zproxy

          helm upgrade --install --wait --timeout 120s 0box -n ${{ env.NETWORK }} --set zbox.zboxImage.tag=latest --set zbox.host=devnet-0chain.net 0chain-helm/zbox

          helm upgrade --install --wait --timeout 120s 0search -n ${{ env.NETWORK }} --set blockRecorder.blockRecorderImage.tag=latest --set blockRecorder.host=devnet-0chain.net 0chain-helm/zsearch

          helm upgrade --install --wait --timeout 120s blobber-stake -n ${{ env.NETWORK }} --set blobberStack.blobberCount=6 --set blobberStack.host=devnet-0chain.net --set blobberStack.image.tag=latest 0chain-helm/blobberStake

          rm -rf ~/.kube

      - name: "Use Network from user input"
        if: github.event_name == 'workflow_dispatch'
        run: |
            echo "NETWORK=$(echo ${{github.event.inputs.network}})" >> $GITHUB_ENV
            echo "ZBOX_BRANCH=$(echo ${{github.event.inputs.zbox_branch}})" >> $GITHUB_ENV
            echo "ZWALLET_BRANCH=$(echo ${{github.event.inputs.zwallet_branch}})" >> $GITHUB_ENV

      - name: "User Network from newly deployed chain"
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "NETWORK=$(echo dev-${RUNNER_NAME:(-1)}.devnet-0chain.net)" >> $GITHUB_ENV
          echo "ZWALLET_BRANCH=staging" >> $GITHUB_ENV
          echo "ZBOX_BRANCH=staging" >> $GITHUB_ENV

      - name: Force Install GIT latest
        run: |
          apt-get install -y software-properties-common \
          && apt-get update \
          && add-apt-repository -y ppa:git-core/ppa \
          && apt-get update \
          && apt-get install -y git

      - name: "Checkout system tests"
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: "Get CLI Cache Key"
        run: |
          echo ZWALLET_SHA=$(curl --silent https://api.github.com/repos/0chain/zwalletcli/git/refs/heads/${{ env.ZWALLET_BRANCH }}  | jq --raw-output .object.sha) >> $GITHUB_ENV
          echo ZBOX_SHA=$(curl --silent https://api.github.com/repos/0chain/zboxcli/git/refs/heads/${{ env.ZBOX_BRANCH }}  | jq --raw-output .object.sha) >> $GITHUB_ENV

      - name: "Cache CLI Binaries"
        id: cli-cache
        uses: actions/cache@v2
        with:
          path: |
            tests/cli_tests/zbox
            tests/cli_tests/zwallet
          key: cli-cache-${{ runner.os }}-${{ env.ZWALLET_SHA }}-${{ env.ZBOX_SHA }}

      - name: "Checkout 0wallet CLI"
        if: steps.cli-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          ref: ${{ env.ZWALLET_BRANCH }}
          repository: 0chain/zwalletcli
          fetch-depth: 1
          path: ./zwalletcli

      - name: "Checkout 0box CLI"
        if: steps.cli-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          ref: ${{ env.ZBOX_BRANCH }}
          repository: 0chain/zboxcli
          fetch-depth: 1
          path: ./zboxcli

      - name: "Setup Go"
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: "Build CLI Binaries"
        if: steps.cli-cache.outputs.cache-hit != 'true'
        run: |
          cd zwalletcli
          make install
          mv zwallet ../tests/cli_tests
          cd ../zboxcli
          make install
          mv zbox ../tests/cli_tests

      - name: "Get Time"
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: YYYY-MM-DD_HH.mm.ss

      - name: "Run CLI System Tests"
        shell: 'script --return --quiet --command "bash {0}"'
        run: |
          go get gotest.tools/gotestsum
          cd tests/cli_tests
          sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK }}/dns," -i ./config/zbox_config.yaml
          (./zwallet version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZWallet Version Info:/") || true
          (./zbox version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZBox Version Info:/") || true
          printf '#!/bin/bash\nset -o pipefail\nCONFIG_PATH=./zbox_config.yaml go test ./... -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)/d\n"' > TEST_RUNNER_COMMAND.sh && chmod 777 TEST_RUNNER_COMMAND.sh
          ~/go/bin/gotestsum --format testname --raw-command -- ./TEST_RUNNER_COMMAND.sh

      - name: "Archive CLI Config & Console Output"
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: System-Test-${{ steps.time.outputs.time }}
          path: |
            ./tests/cli_tests/config
            ./tests/cli_tests/cmdlog.log

      - if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v2

      - if: github.event_name != 'workflow_dispatch'
        uses: azure/setup-helm@v1
        with:
          version: 'v3.2.2'

      - if: github.event_name != 'workflow_dispatch'
        uses: azure/setup-kubectl@v1
        id: install-tidyup

      - name: Setup helm repo
        if: github.event_name != 'workflow_dispatch'
        run: |
          helm repo add 0chain-helm http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/helmCharts/
          helm repo update

      - name: Setup kubeconfig
        if: github.event_name != 'workflow_dispatch'
        run: |
          mkdir -p ~/.kube
          if [[ "dev-${RUNNER_NAME:(-1)}" == "dev-1" ]]; then
            echo "${{ secrets.DEV1KC }}" | base64 -d > ~/.kube/config
          elif [[ "dev-${RUNNER_NAME:(-1)}" == "dev-2" ]]; then
            echo "${{ secrets.DEV2KC }}" | base64 -d > ~/.kube/config
          fi

      - name: Cleanup
        if: github.event_name != 'workflow_dispatch'
        run: |
          helm list --short -n dev-${RUNNER_NAME:(-1)} | xargs -L1 helm delete -n dev-${RUNNER_NAME:(-1)}
          sleep 30
          helm upgrade --install --wait --timeout 120s cleanup -n $dev-${RUNNER_NAME:(-1)} 0chain-helm/cleanDir
          kubectl wait --for=condition=complete --timeout 900s job/helm-clean-directory -n dev-${RUNNER_NAME:(-1)}
