name: "0Chain System Tests"

env:
  TAG: staging
  ZWALLET_BRANCH: staging
  ZBOX_BRANCH: staging

on:
  push:
  workflow_dispatch: # Workflow dispatch will simply test against a given network and will not deploy one out
    inputs:
      network:
        description: 'network'
        default: 'dev-1'
        required: true
      domain:
        description: 'domain eg: devnet-0chain.net'
        default: 'devnet-0chain.net'
        required: true
      zbox_branch:
        description: 'zbox branch'
        default: 'staging'
        required: true
      zwallet_branch:
        description: 'zwallet branch'
        default: 'staging'
        required: true

jobs:
  golangci:
    name: "lint"
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42

  system-tests:
    name: "System Tests"
    runs-on: [ tests-suite ]
    timeout-minutes: 20
    steps:
      - name: "Install helm"
        if: github.event_name != 'workflow_dispatch'
        uses: azure/setup-helm@v1
        with:
          version: 'v3.2.2'

      - name: "Install kubectl"
        if: github.event_name != 'workflow_dispatch'
        uses: azure/setup-kubectl@v1
        id: install

      - name: "Get target k8s cluster details"
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "NETWORK=dev-${RUNNER_NAME:(-1)}" >> $GITHUB_ENV
          echo "RUNNER_NUMBER=${RUNNER_NAME:(-1)}" >> $GITHUB_ENV

      - name: "Configure helm & kubectl"
        if: github.event_name != 'workflow_dispatch'
        run: |
          helm repo add 0chain-helm http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/latest/
          helm repo add 0chain-helm2 http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/helmCharts/
          helm repo update
          mkdir -p ~/.kube
          echo "${{ secrets[format('DEV{0}KC', env.RUNNER_NUMBER)] }}" | base64 -d > ~/.kube/config

      - name: "Remove existing 0Chain instance"
        if: github.event_name != 'workflow_dispatch'
        run: |
          helm list --short -n ${{ env.NETWORK }} | xargs -L1 helm delete -n ${{ env.NETWORK }}
          sleep 30
          helm upgrade --install --wait --timeout 120s cleanup -n ${{ env.NETWORK }} 0chain-helm2/cleanDir
          kubectl wait --for=condition=complete --timeout 900s job/helm-clean-directory -n ${{ env.NETWORK }}

      - name: "Deploy 0Chain"
        if: github.event_name != 'workflow_dispatch'
        run: |

          helm upgrade --install --wait  0chain --set sharder.persistence.enabled=true --set miner.persistence.enabled=true --set sharder.image.tag=${{ env.TAG }} --set miner.image.tag=${{ env.TAG }} -n ${{ env.NETWORK }} 0chain-helm/zchain

          helm upgrade --install --wait  --set zdns.persistence.enabled=true 0dns --set zdns.image.tag=${{ env.TAG }} --set zdns.host=devnet-0chain.net -n ${{ env.NETWORK }}  0chain-helm/zdns

          helm upgrade --install --wait  blobber --set blobber.persistence.enabled=true --set blobber.host=devnet-0chain.net --set blobber.image.tag=${{ env.TAG }} --set validator.image.tag=${{ env.TAG }} -n ${{ env.NETWORK }}  0chain-helm/blobber

          helm upgrade --install --wait  0block --set zblock.persistence.enabled=true --set zblock.host=devnet-0chain.net --set zblock.image.tag=${{ env.TAG }} -n ${{ env.NETWORK }}  0chain-helm/zblock

          helm upgrade --install --wait  explorer --set explorer.persistence.enabled=true --set explorer.image.tag=latest --set explorer.host=devnet-0chain.net -n ${{ env.NETWORK }}  0chain-helm/explorer

          helm upgrade --install --wait  0proxy --set zproxy.persistence.enabled=true --set zproxy.host=devnet-0chain.net --set zproxy.image.tag=${{ env.TAG }} -n ${{ env.NETWORK }}  0chain-helm/zproxy

          helm upgrade --install --wait  0box --set zbox.persistence.enabled=true --set zbox.host=devnet-0chain.net --set zbox.image.tag=${{ env.TAG }} -n ${{ env.NETWORK }}  0chain-helm/zbox

          helm upgrade --install --wait  0search --set zsearch.persistence.enabled=true --set zsearch.host=devnet-0chain.net --set zsearch.image.tag=${{ env.TAG }} -n ${{ env.NETWORK }}  0chain-helm/zsearch

          helm upgrade --install --wait  blobber-stake -n ${{ env.NETWORK }} --set blobberStake.blobberCount=6 --set blobberStake.host=devnet-0chain.net --set blobberStake.image.tag=latest 0chain-helm/blobberStake

      - name: "Wait for chain deployment to complete"
        if: github.event_name != 'workflow_dispatch'
        run: |
          sleep 60
          counter=0; while [ $counter -lt 30 ] && kubectl -n ${{ env.NETWORK }} get pods | grep blobber-stake | grep -vi completed; do sleep 10 && echo "Waiting Chain deployment to finish." && ((counter=counter+1)); done
          rm -rf ~/.kube

      - name: "Connect to network from user input"
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "NETWORK=$(echo ${{github.event.inputs.network}}.${{github.event.inputs.domain}})" >> $GITHUB_ENV
          echo "ZBOX_BRANCH=$(echo ${{github.event.inputs.zbox_branch}})" >> $GITHUB_ENV
          echo "ZWALLET_BRANCH=$(echo ${{github.event.inputs.zwallet_branch}})" >> $GITHUB_ENV

      - name: "Connect to newly deployed 0Chain instance"
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "NETWORK=$(echo dev-${RUNNER_NAME:(-1)}.devnet-0chain.net)" >> $GITHUB_ENV

      - name: "Checkout system tests"
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: "Get CLI Cache Key"
        run: |
          echo ZWALLET_SHA=$((curl --silent --fail https://api.github.com/repos/0chain/zwalletcli/git/refs/heads/${{ env.ZWALLET_BRANCH }} || echo '{"object":{"sha": "${{ env.ZWALLET_BRANCH }}"}}') | jq --raw-output .object.sha) >> $GITHUB_ENV
          echo ZBOX_SHA=$((curl --silent --fail https://api.github.com/repos/0chain/zboxcli/git/refs/heads/${{ env.ZBOX_BRANCH }}  || echo '{"object":{"sha": "${{ env.ZBOX_BRANCH }}"}}') | jq --raw-output .object.sha) >> $GITHUB_ENV

      - name: "Cache CLI Binaries"
        id: cli-cache
        uses: actions/cache@v2
        with:
          path: |
            tests/cli_tests/zbox
            tests/cli_tests/zwallet
          key: cli-cache-${{ runner.os }}-${{ env.ZWALLET_SHA }}-${{ env.ZBOX_SHA }}-v2

      - name: "Checkout 0wallet CLI"
        if: steps.cli-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          ref: ${{ env.ZWALLET_BRANCH }}
          repository: 0chain/zwalletcli
          fetch-depth: 1
          path: ./zwalletcli

      - name: "Checkout 0box CLI"
        if: steps.cli-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          ref: ${{ env.ZBOX_BRANCH }}
          repository: 0chain/zboxcli
          fetch-depth: 1
          path: ./zboxcli

      - name: "Setup Go"
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: "Build CLI Binaries"
        if: steps.cli-cache.outputs.cache-hit != 'true'
        run: |
          cd zwalletcli
          make install
          mv zwallet ../tests/cli_tests
          cd ../zboxcli
          make install
          mv zbox ../tests/cli_tests

      - name: "Get Time"
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: YYYY-MM-DD_HH.mm.ss

      - name: "Set up system tests"
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_ENV
          go get gotest.tools/gotestsum
          go get github.com/vakenbolt/go-test-report
          cd tests/cli_tests
          mkdir -p $(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')/${GITHUB_SHA}
          sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK }}/dns," -i ./config/zbox_config.yaml
          (./zwallet version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZWallet Version Info:/") || true
          (./zbox version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZBox Version Info:/") || true
          printf '#!/bin/bash\nset -o pipefail\nCONFIG_PATH=./zbox_config.yaml go test ./... -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > TEST_RUNNER_COMMAND.sh && chmod 777 TEST_RUNNER_COMMAND.sh

      - name: "Run CLI System Tests"
        shell: 'script --return --quiet --command "bash {0}"'
        run: |
          cd tests/cli_tests
          exit_code=0
          ~/go/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname --raw-command -- ./TEST_RUNNER_COMMAND.sh || exit_code=$?
          cat test-output.json | ~/go/bin/go-test-report --groupSize 1 --output ${{ env.BRANCH }}/${GITHUB_SHA}/index.html --title "0Chain System test suite [${{ env.BRANCH }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK }}] at [${{ steps.time.outputs.time }}]"
          cp -R ./${{ env.BRANCH }}/${GITHUB_SHA} ./${{ env.BRANCH }}/latest
          exit $exit_code

      - name: "Deploy report page"
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: test_reports
          keep_files: true
          github_token: "${{ secrets.SVC_ACCOUNT_SECRET }}"
          publish_dir: "./tests/cli_tests/${{ env.BRANCH }}"
          destination_dir: "./${{ env.BRANCH }}"
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      - name: "Archive CLI Config & Console Output"
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: System-Test-${{ steps.time.outputs.time }}
          path: |
            ./tests/cli_tests/config
            ./tests/cli_tests/cmdlog.log
            ./tests/cli_tests/${{ env.BRANCH }}/${GITHUB_SHA}/index.html

      - name: "Wait for report deployment to complete"
        if: always()
        run: counter=0; while [ $counter -lt 5 ] && curl -o /dev/null -Isw '%{http_code}\n' "https://0chain.github.io/system_test/${{ env.BRANCH }}/${GITHUB_SHA}/index.html?t=$(date +%s)" | grep -v 200 > /dev/null; do sleep 10 && echo "Waiting for report page to deploy..." && ((counter=counter+1)); done

      - name: "Report Link"
        if: always()
        run: echo "https://0chain.github.io/system_test/${{ env.BRANCH }}/${GITHUB_SHA}/index.html"